package org.personal.comerspleject.domain.auth.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.personal.comerspleject.config.exception.EcomosException;
import org.personal.comerspleject.config.exception.ErrorCode;
import org.personal.comerspleject.config.jwt.JwtUtil;
import org.personal.comerspleject.domain.auth.dto.request.SigninRequestDto;
import org.personal.comerspleject.domain.auth.dto.request.SignupRequestDto;
import org.personal.comerspleject.domain.auth.entity.AuthUser;
import org.personal.comerspleject.domain.coupon.policyAndscheduler.CouponPolicyRunner;
import org.personal.comerspleject.domain.coupon.repository.UserCouponRepository;
import org.personal.comerspleject.domain.order.dto.response.RecentOrderResponseDto;
import org.personal.comerspleject.domain.order.entity.Order;
import org.personal.comerspleject.domain.order.repository.OrderRepository;
import org.personal.comerspleject.domain.users.user.dto.response.UserInfoResponseDto;
import org.personal.comerspleject.domain.users.user.entity.User;
import org.personal.comerspleject.domain.users.user.entity.UserRole;
import org.personal.comerspleject.domain.users.user.repository.UserRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.regex.Pattern;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;
    private final CouponPolicyRunner couponPolicyRunner;
    private final OrderRepository orderRepository;

    // Ïù¥Î©îÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ï†ïÍ∑ú ÌëúÌòÑÏãù
    private static final String EMAIL_PATTERN =
            "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";

    // ÎπÑÎ∞ÄÎ≤àÌò∏ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ï†ïÍ∑ú ÌëúÌòÑÏãù
    private static final String PASSWORD_PATTERN =
            "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d!@#$%^&*()_+=\\-\\[\\]{};':\"\\\\|,.<>/?`~]{8,}$";
    private final UserCouponRepository userCouponRepository;

    // ÌöåÏõêÍ∞ÄÏûÖ
    @Transactional
    public void signup(SignupRequestDto signupRequestDto) {
        try{
            log.info("‚û°Ô∏è ÌöåÏõêÍ∞ÄÏûÖ ÏöîÏ≤≠ ÏàòÏã†: {}", signupRequestDto);
        } catch(Exception e) {
            e.printStackTrace();
            throw new EcomosException(ErrorCode._INTERNAL_SERVER_ERROR);
        }


        // Ïù¥Î©îÏùº ÌòïÏãù Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if(!isValidEmail(signupRequestDto.getEmail())) {
            log.warn("‚õî ÏûòÎ™ªÎêú Ïù¥Î©îÏùº ÌòïÏãù: {}", signupRequestDto.getEmail());
            throw new EcomosException(ErrorCode._BAD_REQUEST_INVALID_EMAIL);
        }

        // Ïù¥Î©îÏùº Ï§ëÎ≥µÌôïÏù∏
        if(userRepository.existsByEmail(signupRequestDto.getEmail())) {
            log.warn("‚õî Ï§ëÎ≥µÎêú Ïù¥Î©îÏùº: {}", signupRequestDto.getEmail());
            throw new EcomosException(ErrorCode._DUPLICATED_EMAIL);
        }

        // ÎπÑÎ∞ÄÎ≤àÌò∏ ÌòïÏãù Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if(!isValidPassword(signupRequestDto.getPassword())) {
            log.warn("‚õî ÎπÑÎ∞ÄÎ≤àÌò∏ ÌòïÏãù Î∂àÏùºÏπò");
            throw new EcomosException(ErrorCode._INVALID_PASSWORD_FORM);
        }

        String encodedPassword = passwordEncoder.encode(signupRequestDto.getPassword());
        UserRole role = UserRole.of(signupRequestDto.getRole());

        log.info("ÌöåÏõê Í∞ùÏ≤¥ ÏÉùÏÑ± Ï§ë...");

        User newUser = new User(
                signupRequestDto.getEmail(),
                encodedPassword,
                signupRequestDto.getName(),
                role,
                signupRequestDto.getAddress(),
                signupRequestDto.getBirthDate()
        );
        // Ïú†Ï†Ä ÏÉùÏÑ± ÌõÑ Ï†ÄÏû•
        userRepository.save(newUser);
        log.info("‚úÖ Ïú†Ï†Ä Ï†ÄÏû• ÏôÑÎ£å: {}", newUser.getEmail());

        // Ïø†Ìè∞ ÏûêÎèô Î∞úÍ∏â
        try {
            couponPolicyRunner.run(newUser);
            log.info("üéÅ Ïø†Ìè∞ ÏûêÎèô Î∞úÍ∏â ÏôÑÎ£å");
        } catch (Exception e) {
            log.error("‚ùå Ïø†Ìè∞ Î∞úÍ∏â Ï§ë ÏòàÏô∏ Î∞úÏÉù", e);
            throw new EcomosException(ErrorCode._INTERNAL_SERVER_ERROR); // or define a specific coupon-related error
        }
    }

    // Ïù¥Î©îÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Î©îÏÑúÎìú
    private boolean isValidEmail(String email) {
        return Pattern.matches(EMAIL_PATTERN, email);
    }

    // ÎπÑÎ∞ÄÎ≤àÌò∏ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Î©îÏÑúÎìú
    private boolean isValidPassword(String password) {
        return Pattern.matches(PASSWORD_PATTERN, password);
    }

    // Î°úÍ∑∏Ïù∏
    @Transactional
    public String signin(SigninRequestDto signinRequestDto) {
        User user = userRepository.findByEmail(signinRequestDto.getEmail()).orElseThrow(
                () -> new EcomosException(ErrorCode._NOT_FOUND_USER));

        // Î°úÍ∑∏Ïù∏ Ïãú Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏùÑ Í≤ΩÏö∞ 401ÏùÑ Î∞òÌôò
        if(!passwordEncoder.matches(signinRequestDto.getPassword(), user.getPassword())) {
            throw new EcomosException(ErrorCode._PASSWORD_NOT_MATCHES);
        }

        // ÌÉàÌá¥Ìïú Ïú†Ï†ÄÏùº Í≤ΩÏö∞ Î°úÍ∑∏Ïù∏ Î∂àÍ∞Ä
        if(user.isDeleted()) {
            throw new EcomosException(ErrorCode._DELETED_USER);
        }

        return jwtUtil.createToken(user.getUid(), user.getEmail(), user.getName(), user.getRole());
    }

    // Î°úÍ∑∏Ïù∏ Ïú†ÏßÄ
    @Transactional(readOnly = true)
    public UserInfoResponseDto getMyInfo(AuthUser authUSer) {
        User user = userRepository.findByEmail(authUSer.getEmail())
                .orElseThrow(()-> new EcomosException(ErrorCode._NOT_FOUND_USER));

        // Î≥¥Ïú† Ïø†Ìè∞ Ïàò
        int couponCount = userCouponRepository.countActivateCoupons(user);

        // ÏµúÍ∑º Ï£ºÎ¨∏
        Order order = orderRepository.findTopByUserOrderByCreatedAtDesc(user)
                .orElse(null);

        RecentOrderResponseDto recentOrderDto = null;
        if (order != null) {
            List<String> productNames = order.getOrderItems().stream()
                    .map(oi -> oi.getProduct().getName())
                    .toList();

            recentOrderDto = new RecentOrderResponseDto(
                    order.getOId(),
                    order.getCreatedAt(),
                    order.getTotalPrice(),
                    productNames
            );
        }

        return new UserInfoResponseDto(
                user.getUid(),
                user.getName(),
                user.getEmail(),
                user.getAddress(),
                user.getRole(),
                user.getPoint(),
                user.getCreatedAt(),
                couponCount,
                (order != null ? order.getCreatedAt() : null),
                recentOrderDto
        );
    }
}
